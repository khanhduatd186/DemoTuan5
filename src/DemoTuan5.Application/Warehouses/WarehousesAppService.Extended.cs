using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq.Dynamic.Core;
using Microsoft.AspNetCore.Authorization;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.Domain.Repositories;
using DemoTuan5.Permissions;
using DemoTuan5.Warehouses;
using MiniExcelLibs;
using Volo.Abp.Content;
using Volo.Abp.Authorization;
using Volo.Abp.Caching;
using Microsoft.Extensions.Caching.Distributed;
using DemoTuan5.Shared;
using System.Collections;

namespace DemoTuan5.Warehouses
{
    public class WarehousesAppService : WarehousesAppServiceBase, IWarehousesAppService
    {
        //<suite-custom-code-autogenerated>
        public WarehousesAppService(IWarehouseRepository warehouseRepository, WarehouseManager warehouseManager, IDistributedCache<WarehouseExcelDownloadTokenCacheItem, string> excelDownloadTokenCache)
            : base(warehouseRepository, warehouseManager, excelDownloadTokenCache)
        {
        }

		public virtual async Task<List<WarehouseDto>> GetListNoPagedAsync(GetWarehousesInput input)
		{
			var query = (await _warehouseRepository.GetQueryableAsync())
				   .WhereIf(!string.IsNullOrWhiteSpace(input.FilterText), e => e.Code!.Contains(input.FilterText!) || e.Description!.Contains(input.FilterText!))
				   .WhereIf(!string.IsNullOrWhiteSpace(input.Code), e => e.Code.Contains(input.Code))
				   .WhereIf(!string.IsNullOrWhiteSpace(input.Description), e => e.Description.Contains(input.Description))
				   .WhereIf(input.Active.HasValue, e => e.Active == input.Active);
			var lookupData = await query.ToDynamicListAsync<Warehouse>();
			return ObjectMapper.Map<List<Warehouse>, List<WarehouseDto>>(lookupData);
		}
		//</suite-custom-code-autogenerated>

		//Write your custom code...
	}
}
using DemoTuan5.Countries;
using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq.Dynamic.Core;
using Microsoft.AspNetCore.Authorization;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.Domain.Repositories;
using DemoTuan5.Permissions;
using DemoTuan5.WarehouseLocations;
using MiniExcelLibs;
using Volo.Abp.Content;
using Volo.Abp.Authorization;
using Volo.Abp.Caching;
using Microsoft.Extensions.Caching.Distributed;
using DemoTuan5.Shared;
using DemoTuan5.Warehouses;

namespace DemoTuan5.WarehouseLocations
{
    public class WarehouseLocationsAppService : WarehouseLocationsAppServiceBase, IWarehouseLocationsAppService
    {
        //<suite-custom-code-autogenerated>
        public WarehouseLocationsAppService(IWarehouseLocationRepository warehouseLocationRepository, WarehouseLocationManager warehouseLocationManager, IDistributedCache<WarehouseLocationExcelDownloadTokenCacheItem, string> excelDownloadTokenCache, IRepository<Country, Guid> countryRepository, IRepository<Warehouse, Guid> warehouseRepository)
            : base(warehouseLocationRepository, warehouseLocationManager, excelDownloadTokenCache, countryRepository, warehouseRepository)
        {
        }

        public async Task<List<WarehouseLocationDto>> GetListNoPagedAsync(GetWarehouseLocationsInput input)
        {
            var query = (await _warehouseLocationRepository.GetQueryableAsync())
               .WhereIf(!string.IsNullOrWhiteSpace(input.FilterText), e => e.Code!.Contains(input.FilterText!) || e.Description!.Contains(input.FilterText!))
                   .WhereIf(!string.IsNullOrWhiteSpace(input.Code), e => e.Code.Contains(input.Code))
                   .WhereIf(!string.IsNullOrWhiteSpace(input.Description), e => e.Description.Contains(input.Description))
                   .WhereIf(input.Active.HasValue, e => e.Active == input.Active)
                   .WhereIf(input.IdxMin.HasValue, e => e.Idx >= input.IdxMin!.Value)
                   .WhereIf(input.IdxMax.HasValue, e => e.Idx <= input.IdxMax!.Value)
                   .WhereIf(input.CountryId != null && input.CountryId != Guid.Empty, e => e.CountryId != null && e.CountryId == input.CountryId)
                   .WhereIf(input.WarehouseId != null && input.WarehouseId != Guid.Empty, e => e.WarehouseId != null && e.WarehouseId == input.WarehouseId);
            var lookupData = await query.ToDynamicListAsync<WarehouseLocation>();
            return ObjectMapper.Map<List<WarehouseLocation>, List<WarehouseLocationDto>>(lookupData);
        }
        //</suite-custom-code-autogenerated>

        //Write your custom code...
    }
}